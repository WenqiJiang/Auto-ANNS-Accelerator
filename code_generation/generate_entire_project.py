import argparse 
import datetime
import os
import yaml
import numpy as np


now = datetime.datetime.now()
time_str = now.strftime("%Y-%m-%d-%H-%M")

parser = argparse.ArgumentParser()
parser.add_argument('--reference_project_dir', type=str, default="../reference_code/local_anns_55_final_2019.2", help="input project directory")
parser.add_argument('--output_project_dir', type=str, default="../generated_projects/ANNS_project_{}".format(time_str), help="output project directory")
args = parser.parse_args()

# Copy project
if not os.path.exists(args.output_project_dir):
    os.system("mkdir {o}".format(o=args.output_project_dir))
os.system("cp -r {i} {o}".format(
    i=os.path.join(args.reference_project_dir, "*"),
    o=os.path.join(args.output_project_dir)))
os.system("cp config.yaml {o}".format(o=args.output_project_dir))

# Replace some files with code generated by templates
os.system("python codegen_constants.py --input_dir template_files --output_dir {}".format(
    os.path.join(args.output_project_dir, "src")))
os.system("python codegen_design_cfg.py --input_dir template_files --output_dir {}".format(
    os.path.join(args.output_project_dir, "src")))
os.system("python codegen_HBM_interconnections.py --input_dir template_files --output_dir {}".format(
    os.path.join(args.output_project_dir, "src")))
os.system("python codegen_host_cpp.py --input_dir template_files --output_dir {}".format(
    os.path.join(args.output_project_dir, "src")))
os.system("python codegen_vadd.py --input_dir template_files --output_dir {}".format(
    os.path.join(args.output_project_dir, "src")))