---
  # Constants
  NLIST: 8192
  NPROBE: 17
  D: 128
  M: 16
  K: 256
  PRIORITY_QUEUE_LEN: 10

  QUERY_NUM: 10000

  LARGE_NUM: 99999999 # used to init the heap

  # stage 2
  # except last PE: compute more distances per query, last one compute less
  # e.g., nlist = 8192, PE num = 15, 
  #   each of the first 14 PEs construct 547 tables (8192 / 15 round up), 
  #   while the last constructs 534: 14 * 547 + 534 = 8192
  PE_NUM_CENTER_DIST_COMP: 15
  # The rest variables should be caculated in python (YAML does not support arithmetics) 
  # PE_NUM_CENTER_DIST_COMP_EVEN: 14
  # CENTROIDS_PER_PARTITION_EVEN: 547
  # CENTROIDS_PER_PARTITION_LAST_PE (NLIST - PE_NUM_CENTER_DIST_COMP_EVEN * CENTROIDS_PER_PARTITION_EVEN)

  # stage 3
  # 2 levels, first level 2 queue, second level 1 queue
  STAGE_3_PRIORITY_QUEUE_LEVEL: 2
  STAGE_3_PRIORITY_QUEUE_L1_NUM: 2

  # stage 4
  # except last PE: construct more tables per query, last one construct less
  # e.g., nprobe = 17, PE num = 6, each of the first 5 PEs construct 3 tables, 
  #   while the last constructs 2: 5 * 3 + 2 = 17
  PE_NUM_TABLE_CONSTRUCTION: 6 # 2
  # PE_NUM_TABLE_CONSTRUCTION_LARGER: 5 # 1
  # PE_NUM_TABLE_CONSTRUCTION_SMALLER: 1
  # NPROBE_PER_TABLE_CONSTRUCTION_PE_LARGER: 3 #9
  # NPROBE_PER_TABLE_CONSTRUCTION_PE_SMALLER: 2 #8

  # stage 5
  HBM_CHANNEL_NUM: 10 # PE num = 3 * HBM_CHANNEL_NUM
  # number of 16 outputs per cycle, e.g., HBM channel num = 10, comp PE num = 30, then 
  #   SORT_GROUP_NUM = 2; if HBM channel = 12, PE_num = 36, then SORT_GROUP_NUM = 3
  SORT_GROUP_NUM: 2