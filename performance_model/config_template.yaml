---

  <--best_option-->

  # Constants
  NLIST: <--nlist-->
  NPROBE: <--nprobe-->
  D: 128
  M: 16
  K: 256
  TOPK: <--topk-->

  QUERY_NUM: 10000

  LARGE_NUM: 99999999 # used to init the heap
  # stage 1
  OPQ_ENABLE: <--OPQ_enable-->
  OPQ_UNROLL_FACTOR: <--OPQ_unroll_factor--> # 4 or 8, the larger the better performance, left None if OPQ_ENABLE=False, only used when OPQ_ENABLE=True

  # stage 2
  # except last PE: compute more distances per query, last one compute less
  # e.g., nlist = 8192, PE num = 15, 
  #   each of the first 14 PEs construct 547 tables (8192 / 15 round up), 
  #   while the last constructs 534: 14 * 547 + 534 = 8192
  STAGE2_ON_CHIP: <--STAGE2_ON_CHIP-->
  PE_NUM_CENTER_DIST_COMP: <--PE_NUM_CENTER_DIST_COMP-->

  # stage 3
  STAGE_3_PRIORITY_QUEUE_LEVEL: <--STAGE_3_PRIORITY_QUEUE_LEVEL--> # support 1 or 2
  STAGE_3_PRIORITY_QUEUE_L1_NUM: <--STAGE_3_PRIORITY_QUEUE_L1_NUM--> # only used when STAGE_3_PRIORITY_QUEUE_LEVEL=2

  # stage 4
  # except last PE: construct more tables per query, last one construct less
  # e.g., nprobe = 17, PE num = 6, each of the first 5 PEs construct 3 tables, 
  #   while the last constructs 2: 5 * 3 + 2 = 17
  PE_NUM_TABLE_CONSTRUCTION: <--PE_NUM_TABLE_CONSTRUCTION-->

  # stage 5
  # (HBM_CHANNEL_NUM * 3 / STAGE5_COMP_PE_NUM) must be integar
  # e.g., default 1 HBM channel -> 3 PQ code streams -> STAGE5_COMP_PE_NUM = 3 * HBM_CHANNEL_NUM
  # e.g., merge content of 1 HBM channel to 1 PQ code stream -> STAGE5_COMP_PE_NUM = HBM_CHANNEL_NUM
  # e.g., merge content of 2 HBM channels to 1 PQ code stream -> STAGE5_COMP_PE_NUM = HBM_CHANNEL_NUM / 2
  HBM_CHANNEL_NUM: <--HBM_CHANNEL_NUM--> # PQ code stream num = 3 * HBM_CHANNEL_NUM
  STAGE5_COMP_PE_NUM: <--STAGE5_COMP_PE_NUM-->

  # stage 6
  # there could be a sorting network before the priority queue group (SORT_GROUP_ENABLE)
  #   if not, set SORT_GROUP_ENABLE to False, and SORT_GROUP_NUM to 0 or None
  # number of 16 outputs per cycle, e.g., HBM channel num = 10, comp PE num = 30, then 
  #   SORT_GROUP_NUM = 2; if HBM channel = 12, PE_num = 36, then SORT_GROUP_NUM = 3
  SORT_GROUP_ENABLE: <--SORT_GROUP_ENABLE-->
  SORT_GROUP_NUM: <--SORT_GROUP_NUM--> # only used when SORT_GROUP_ENABLE=True
  STAGE_6_PRIORITY_QUEUE_LEVEL: <--STAGE_6_PRIORITY_QUEUE_LEVEL--> # supported level num: 2 or 3
  # only fill STAGE_6_PRIORITY_QUEUE_L2_NUM, STAGE_6_STREAM_PER_L2_QUEUE_LARGER, STAGE_6_STREAM_PER_L2_QUEUE_SMALLER
  #   when STAGE_6_PRIORITY_QUEUE_LEVEL = 3, else left them blank
  # Must subject to: L1 stream num = (without sort-reduction unit) STAGE5_COMP_PE_NUM * 2 
  #                  or = (with sort reduction) 16 * 2
  # (STAGE_6_PRIORITY_QUEUE_L2_NUM - 1) * STAGE_6_STREAM_PER_L2_QUEUE_LARGER + STAGE_6_STREAM_PER_L2_QUEUE_SMALLER
  # STAGE_6_PRIORITY_QUEUE_L2_NUM: 2 # only used when when STAGE_6_PRIORITY_QUEUE_LEVEL = 3
  # STAGE_6_STREAM_PER_L2_QUEUE_LARGER: 6 # only used when when STAGE_6_PRIORITY_QUEUE_LEVEL = 3
  # STAGE_6_STREAM_PER_L2_QUEUE_SMALLER: 4 # only used when when STAGE_6_PRIORITY_QUEUE_LEVEL = 3

  # Dataset config
  DB_SCALE: <--DB_SCALE--> # 1M to 1000M
  FPGA_NUM: <--FPGA_NUM--> # e.g., can use 8 FPGAs to serve 1000M dataset, each stores 125M vectors

  # Data directory (don't add "/" after the dir)
  #   e.g., dir=/home/wejiang/saved_npy_data/FPGA_data_SIFT100M_OPQ16,IVF8192,PQ16_HBM_10_banks, 
  #     then the content for HBM0 is:
  #     /home/wejiang/saved_npy_data/FPGA_data_SIFT100M_OPQ16,IVF8192,PQ16_HBM_10_banks/HBM_bank_0_raw
  # DATA_DIR: "/mnt/scratch/wenqi/saved_npy_data/FPGA_data_SIFT100M_IVF4096,PQ16_23_banks"
  # GT_DIR: "/mnt/scratch/wenqi/saved_npy_data/gnd/"

  # FPGA Settings
  DEVICE: <--DEVICE--> # Supported devices: U280, U250, U50
  FREQ: <--FREQ-->
